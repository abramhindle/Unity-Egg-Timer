#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import gtk
import appindicator
import datetime
import os
import subprocess
import time
import gobject
import json

### BEGIN LICENSE
# Egg timer (stolen from Shritesh Bhattarai's Nepali Date Indicator)
# Copyright (C) 2012 Abram Hindle abram.hindle@softwareprocess.es
# Copyright (C) 2012 Bill Traynor
# Copyright (C) 2011 Shritesh Bhattarai shriteshb@gmail.com
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

def gtktimeout(self, *args):
    #if we're not running, don't schedule the timer!
    return self.handle_timeout(*args)

class EggTimer:
    def __init__(self, notifier):
        self.total = 0
        self.current = 0
        self.start_time = 0
        self.notifier = notifier

    def notify(self):
        self.notifier.notify(self)

    def add_total(self, n):
        self.total += n
        self.notify()

    def zero(self):
        self.total = 0
        self.current = 0
        self.notify()

    def stop(self):
        self.current = 0
        self.start_time = 0
        self.notify()
 
    def start(self):
        self.current = self.total
        self.start_time = time.time()
        self.notify()


    def running(self):
        return (self.current > 0 and self.total > 0)

    def update(self):
        ourtime = time.time()
        oldcurrent = self.current
        self.current = max( 0, self.total - (ourtime - self.start_time) )
        if (self.current < 1):
           self.notifier.alarm()
           self.stop()
        else:
           self.notify()


##### Custom Events
##### These are meant to alert or run programs based on a 
##### dot file 

# factory
def make_custom_event( jsonobj ):
    if (jsonobj["action"] == "run"):
        return CustomRunEvent(jsonobj)
    elif (jsonobj["action"] == "both"):
        return CustomBothEvent(jsonobj)
    else:
        return CustomAlarmEvent(jsonobj)

# Base Abstract
class CustomTimeEvent(object):
    def __init__(self, jsonobj):
        self.name = jsonobj["name"]
        self.time = jsonobj["time"]

    def alarm(self):
        print("Ring Ring")

    def menu_name(self):
        return self.name+" "+str(self.time)

class CustomAlarmEvent(CustomTimeEvent):
    def __init__(self, jsonobj):
        super(CustomAlarmEvent, self).__init__(jsonobj)
    def alarm(self):
        dialog = gtk.MessageDialog()
        dialog.set_markup('''Time's up!''')
        dialog.show()

class CustomRunEvent(CustomTimeEvent):
    def __init__(self, jsonobj):
        super(CustomRunEvent, self).__init__(jsonobj)
        self.run = jsonobj["command"]

    def alarm(self):
        os.system("setsid "+self.run+" &")

class CustomBothEvent(CustomTimeEvent):
    def __init__(self, jsonobj):
        super(CustomBothEvent, self).__init__(jsonobj)
        self.alarm_event = CustomAlarmEvent(jsonobj)
        self.run_event = CustomRunEvent(jsonobj)

    def alarm(self):
        self.alarm_event.alarm()
        self.run_event.alarm()


class EggTimerIndicator:
    def __init__(self):
        self.indicator = appindicator.Indicator("egg-timer-indicator",
                                           "",
                                           appindicator.CATEGORY_OTHER)
        self.indicator.set_status(appindicator.STATUS_ACTIVE)
        self.menu_setup()
        self.indicator.set_menu(self.menu)
        self.eggtimer = EggTimer(self)

    def load_custom(self):
        fpath = os.path.expanduser("~/.eggtimerrc")
        if (os.path.exists(fpath)):
            elms = json.loads(file(fpath).read())
	    return elms
        return []

    def _add_menu_item_from_tuple(self, menu, item):
        gtkitem = gtk.MenuItem(item[0])
        if ( len(item) == 3 ): #is a tuple
            gtkitem.connect("activate", item[1], item[2])
        else:
            gtkitem.connect("activate", item[1])
        gtkitem.show()
        menu.append( gtkitem )

    def menu_setup(self):
        self.menu = gtk.Menu()
        self.menu_items = [];
        menu_items_head = [
            ("Start Timer",self.start_timer),
            ("Stop Timer", self.stop_timer),
        ]

	menu_items_tail = [
            ("+30 seconds", self.plus_30_seconds),
            ("+1 minute", self.plus_one_minute),
            ("+5 minute", self.plus_five_minutes),
            ("+1 hour", self.plus_one_hour),
            ("Reset Timer to 0", self.reset_timer_to_zero),
            ("Quit", self.quit)]

        for item in menu_items_head:
            self._add_menu_item_from_tuple( self.menu_items, item)

        # load custom events from the dot file
        menu_items_middle = []
        try:
            self.custom_events = [make_custom_event(x) for x in self.load_custom()]
            menu_items_middle = [(x.menu_name(), self.start_custom_event, x) for x in self.custom_events]        
        except:
            self.show_dialog( ''' Could not load from ~/.eggtimerrc ''')
            pass
        
        # if we have customs we add them, otherwise no
        if (len(menu_items_middle) > 0):
            gtkitem = gtk.MenuItem("Customs")
            submenu = gtk.Menu()
            for item in menu_items_middle:
                self._add_menu_item_from_tuple(submenu, item)
            gtkitem.set_submenu( submenu )
            gtkitem.show()
            self.menu_items.append( gtkitem )            
            
        for item in menu_items_tail:
            self._add_menu_item_from_tuple(self.menu_items, item)


    def main(self):
        self.update_label()
        for item in self.menu_items:
            self.menu.append( item )
        gtk.main()

    def update_label(self):
        self.indicator.set_label(str(int(self.eggtimer.current))+"/"+str(self.eggtimer.total)+" by egg")

    def quit(self, widget):
        sys.exit(0)
    
    def _check_timer(self):
        #if we're already running don't schedule another timeout
        if (not self.eggtimer.running()):
            gobject.timeout_add(1000, gtktimeout, self)

    def start_timer(self, widget):
        self._check_timer()
        self.custom_event = make_custom_event({ "name":"what", "time":10, 'action':"alarm" })
        self.eggtimer.start()

    def start_custom_event(self, widget, custom_event):
        self._check_timer()
        self.custom_event = custom_event
        self.eggtimer.zero()
        self.eggtimer.add_total(int(custom_event.time))
        self.eggtimer.start()

    def stop_timer(self, widget):
        self.eggtimer.stop()
    def plus_30_seconds(self, widget):
        self.eggtimer.add_total(30)
    def plus_one_minute(self, widget):
        self.eggtimer.add_total(60)
    def plus_five_minutes(self, widget):
        self.eggtimer.add_total(5*60)
    def plus_one_hour(self, widget):
        self.eggtimer.add_total(60*60)
    def reset_timer_to_zero(self, widget):
        self.eggtimer.zero()
    def notify(self, eggtimer):
        self.update_label()
	

    def handle_timeout(self, *args):
        self.eggtimer.update()
        #if we're not running, don't schedule the timer!
        run = self.eggtimer.running()
        return run

    # delete to custom_event
    def alarm(self):
        self.custom_event.alarm()

    def show_dialog(self, text):
        dialog = gtk.MessageDialog()
        dialog.set_markup( text )
        dialog.show()

if __name__ == "__main__":
    indicator = EggTimerIndicator()
    indicator.main()
